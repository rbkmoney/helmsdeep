[
    {kernel, [
        {logger_level, info},
        {logger, [
            {handler, default, logger_std_h, #{
                level => debug,
                config => #{
                    type => standard_io
                },
                filters => [{access_log, {fun logger_filters:domain/2, {stop, equal, [cowboy_access_log]}}}],
                formatter => {logger_logstash_formatter, #{
                    message_redaction_regex_list => [
                        ",?'(payout_key|secret_key)'='[0-9a-zA-Z]+',?"
                        ",?\{\"key\":\"(payout_key|secret_key)\",\"value\":\"[0-9a-zA-Z]+\"\},?",
                            ",?Value\{bin='(payout_key|secret_key)'\}=Value\{bin='[0-9a-zA-Z]+'\},?"
                    ]
                }}
            }},
            {handler, access_logger, logger_std_h, #{
                level => info,
                config => #{
                    type => standard_io
                },
                filters => [{access_log, {fun logger_filters:domain/2, {stop, not_equal, [cowboy_access_log]}}}],
                formatter => {logger_logstash_formatter, #{
                    message_redaction_regex_list => [
                        ",?'(payout_key|secret_key)'='[0-9a-zA-Z]+',?"
                        ",?\{\"key\":\"(payout_key|secret_key)\",\"value\":\"[0-9a-zA-Z]+\"\},?",
                        ",?Value\{bin='(payout_key|secret_key)'\}=Value\{bin='[0-9a-zA-Z]+'\},?"
                    ]
                }}
            }}
        ]}
    ]},

    {scoper, [
        {storage, scoper_storage_logger}
    ]},

    {dmt_client, [
        {max_cache_size, #{
            elements => 80,
            memory => 209715200 % 200Mb
        }},
        {cache_update_interval, 5000}, % milliseconds
        {cache_server_call_timeout, 30000}, % milliseconds
        {woody_event_handlers, [
            {scoper_woody_event_handler, #{
                event_handler_opts => #{
                    formatter_opts => #{
                        max_length => 1000,
                        max_printable_string_length => 80
                    }
                }
            }}
        ]},
        {service_urls, #{
            'Repository'       => <<"http://dominant:8022/v1/domain/repository">>,
            'RepositoryClient' => <<"http://dominant:8022/v1/domain/repository_client">>
        }}
    ]},

    {wapi, [
        {ip                  , "::"                     },
        {port                , 8080                     },
        {realm               , <<"external">>           },
        {public_endpoint     , <<"http://wapi">>        },
        {transport           , thrift                   },
        {bouncer_ruleset_id  , <<"service/authz/api">>  },
        {access_conf, #{
            jwt => #{
                signee => wapi,
                keyset => #{
                    keycloak => #{
                        source => {pem_file, "/var/lib/wapi/keys/keycloak/keycloak.pubkey.pem"},
                        metadata => #{
                            auth_method => user_session_token,
                            user_realm => <<"external">>
                        }
                    },
                    wapi => #{
                        source => {pem_file, "/var/lib/wapi/keys/wapi.privkey.pem"},
                        metadata => #{}
                    }
                }
            }
        }},
        {signee, wapi},
        {oops_bodies, #{
            500 => "/var/lib/wapi/oops-bodies/oopsBody1",
            501 => "/var/lib/wapi/oops-bodies/oopsBody1",
            502 => "/var/lib/wapi/oops-bodies/oopsBody1",
            503 => "/var/lib/wapi/oops-bodies/oopsBody2",
            504 => "/var/lib/wapi/oops-bodies/oopsBody2"
        }},
        {health_check, #{
            disk    => {erl_health, disk     , ["/", 99]},
            memory  => {erl_health, cg_memory, [70]},
            service => {erl_health, service  , [<<"wapi-v0">>]}
        }},
        {file_storage_url_lifetime, 60}, % seconds
        {lechiffre_opts, #{
            decryption_sources => [
                {json, {file, <<"/var/lib/wapi/keys/token_encryption_key1.jwk">>}}
            ]
        }},
        {swagger_handler_opts, #{
            validation_opts => #{
                custom_validator => wapi_swagger_validator
            }
        }}
    ]},

    {wapi_woody_client, [
        {service_urls, #{
            webhook_manager      => <<"http://wallets-hooker:8022/wallets-hooker/v1/hook">>,
            cds_storage          => <<"http://cds:8022/v2/storage">>,
            identdoc_storage     => <<"http://cds:8022/v1/identity_document_storage">>,
            fistful_stat         => <<"http://fistful-magista:8022/stat">>,
            fistful_report       => <<"http://fistful-reporter:8022/fistful/reports">>,
            file_storage         => <<"http://file-storage:8022/file_storage">>,
            fistful_wallet       => <<"http://fistful:8022/v1/wallet">>,
            fistful_identity     => <<"http://fistful:8022/v1/identity">>,
            fistful_destination  => <<"http://fistful:8022/v1/destination">>,
            fistful_withdrawal   => <<"http://fistful:8022/v1/withdrawal">>,
            fistful_provider     => <<"http://fistful:8022/v1/provider">>,
            fistful_w2w_transfer => <<"http://fistful:8022/v1/w2w_transfer">>,
            fistful_p2p_template => <<"http://fistful:8022/v1/p2p_template">>,
            fistful_p2p_transfer => <<"http://fistful:8022/v1/p2p_transfer">>,
            fistful_p2p_session  => <<"http://fistful:8022/v1/p2p_transfer/session">>
        }},
        {api_deadlines, #{
            wallet   => 30000 % millisec. fuck the party.
        }}
    ]},

    {bender_client, [
        {services, #{
            'Bender'    => <<"http://bender:8022/v1/bender">>,
            'Generator' => <<"http://bender:8022/v1/generator">>
        }},
        {deadline, 30000}
    ]},

    {os_mon, [
        {disksup_posix_only, true}
    ]},
    %% TODO
    {snowflake, [{machine_id, 1}]},

    {prometheus, [
        {collectors, [default]}
    ]}
].
