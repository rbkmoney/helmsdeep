# -*- mode: yaml -*-

replicaCount: 1

image:
  repository: {{ .Values.services.global.registry.repository | default "docker.io/rbkmoney" }}/fault-detector
  tag: 3a2ce97af9d21d7795b75aef761d2db49d672d0a
  pullPolicy: IfNotPresent

{{ if .Values.services.global.registry.imagePullSecret }}
imagePullSecrets:
  - name: {{ .Values.services.global.registry.imagePullSecret }}
{{ end }}

runopts:
  command: ["/opt/fault-detector/entrypoint.sh"]

env:
  - name: LOGBACK_SERVICE_NAME
    value: "fault-detector"
  - name: SERVICE_8022_NAME
    value: "fault-detector"
  - name: SERVICE_8022_TAGS
    value: "dev"
  - name: SERVICE_CHECK_HTTP
    value: "/actuator/health"
  - name: SERVICE_CHECK_INTERVAL
    value: "3s"
  - name: SERVICE_CHECK_TIMEOUT
    value: "1s"

configMap:
  data:
    entrypoint.sh: |
      {{- tpl (readFile "entrypoint.sh.gotmpl") . | nindent 6 }}
    loggers.xml: |
      {{- readFile "loggers.xml" | nindent 6 }}
    logback.xml: |
      {{- readFile "../logs/logback.xml" | nindent 6 }}

{{- if or .Values.services.postgres.external .Values.services.kafka.ssl.enabled }}
secret:
  data:
    db_config: |
    {{- if .Values.services.kafka.ssl.enabled }}
      kafka.ssl.enabled=true
      kafka.ssl.key-store-location=/vault/secrets/kafka-keystore.p12
      kafka.ssl.key-store-password={{ .Values.services.kafka.ssl.keystorePass }}
      kafka.ssl.key-store-type=PKCS12
      kafka.ssl.key-password={{ .Values.services.kafka.ssl.keyPass }}
      kafka.ssl.trust-store-location=/vault/secrets/kafka-truststore.p12
      kafka.ssl.trust-store-password={{ .Values.services.kafka.ssl.truststorePass }}
      kafka.ssl.trust-store-type=PKCS12
    {{- end }}
{{- end }}

volumes:
  - name: config-volume
    configMap:
      name: {{ .Release.Name }}
      defaultMode: 0755
{{- if .Values.services.kafka.ssl.enabled }}
  - name: kafka-cert
    secret:
      secretName: {{ .Release.Name }}-kafka-cert
  - name: kafka-ca
    secret:
      secretName: java-ca-kafka
{{- end }}
{{- if or .Values.services.postgres.external .Values.services.kafka.ssl.enabled }}
  - name: secret
    secret:
      secretName: {{ .Release.Name }}
{{- end }}

volumeMounts:
  - name: config-volume
    mountPath: /opt/fault-detector/entrypoint.sh
    subPath: entrypoint.sh
    readOnly: true
  - name: config-volume
    mountPath: /opt/fault-detector/logback.xml
    subPath: logback.xml
    readOnly: true
  - name: config-volume
    mountPath: /opt/fault-detector/loggers.xml
    subPath: loggers.xml
    readOnly: true
{{- if .Values.services.kafka.ssl.enabled }}
  - name: kafka-ca
    subPath: kafka-truststore.p12
    mountPath: /vault/secrets/kafka-truststore.p12
    readOnly: true
  - name: kafka-cert
    subPath: {{ .Release.Name }}.p12
    mountPath: /vault/secrets/kafka-keystore.p12
    readOnly: true
{{- end }}
{{- if .Values.services.kafka.ssl.enabled }}
  - name: secret
    subPath: db_config
    mountPath: /vault/secrets/application.properties
    readOnly: true
{{- end }}

service:
  ports:
    - name: api
      port: 8022
    - name: management
      port: 8023

livenessProbe:
  httpGet:
    path: /actuator/health
    port: management

readinessProbe:
  httpGet:
    path: /actuator/health
    port: management

metrics:
  serviceMonitor:
    enabled: {{ .Values.services.global.metrics.enabled }}
    namespace: {{ .Release.Namespace }}
    additionalLabels:
      release: prometheus
    endpoints:
      - port: "management"
        path: /actuator/prometheus
        scheme: http

{{ $domainWithNamespace := printf "%s.%s" .Release.Namespace .Values.services.ingress.rootDomain }}
{{ $ingressDomain := .Values.services.ingress.namespacedDomain | ternary $domainWithNamespace .Values.services.ingress.rootDomain }}

ciliumPolicies:
  - filters:
    - port: 9092
      type: TCP
    name: kafka
    namespace: {{ .Release.Namespace }}
  - filters:
    - port: 8022
      type: TCP
    name: claim-management
  - filters:
    - port: 8022
      type: TCP
    name: dominant

{{/*
      rules:
        kafka:
        - role: consume
          topics:
            - mg-events-invoice
*/}}
