# -*- mode: yaml -*-

replicaCount: 1

image:
  repository: {{ .Values.services.global.registry.repository | default "docker.io/rbkmoney" }}/fistful-magista
  tag: dd17699f8b18f4ac904b1f0d134b3d192100d03f
  pullPolicy: IfNotPresent

{{ if .Values.services.global.registry.imagePullSecret }}
imagePullSecrets:
  - {{ .Values.services.global.registry.imagePullSecret }}
{{ end }}

runopts:
  command: ["/opt/fistful-magista/entrypoint.sh"]

configMap:
  data:
    entrypoint.sh: |
      {{- readFile "entrypoint.sh" | nindent 6 }}
    loggers.xml: |
      {{- readFile "loggers.xml" | nindent 6 }}
    logback.xml: |
      {{- readFile "../logs/logback.xml" | nindent 6 }}

volumes:
  - name: config-volume
    configMap:
      name: {{ .Release.Name }}
      defaultMode: 0755

volumeMounts:
  - name: config-volume
    mountPath: /opt/fistful-magista/entrypoint.sh
    subPath: entrypoint.sh
    readOnly: true
  - name: config-volume
    mountPath: /opt/fistful-magista/logback.xml
    subPath: logback.xml
    readOnly: true
  - name: config-volume
    mountPath: /opt/fistful-magista/loggers.xml
    subPath: loggers.xml
    readOnly: true

service:
  ports:
    - name: api
      port: 8022
    - name: management
      port: 8023

livenessProbe:
  httpGet:
    path: /actuator/health
    port: management
readinessProbe:
  httpGet:
    path: /actuator/health
    port: management

podAnnotations:
  vault.hashicorp.com/role: "db-app"
  vault.hashicorp.com/agent-inject: "true"
  vault.hashicorp.com/agent-inject-secret-application.properties: "database/creds/db-app-fistful-magista"
  vault.hashicorp.com/agent-inject-template-application.properties: |
    {{`{{- with secret "database/creds/db-app-fistful-magista" -}}
    spring.datasource.url=jdbc:postgresql://postgres-postgresql:5432/fistful-magista?sslmode=disable
    spring.datasource.username={{ .Data.username }}
    spring.datasource.password={{ .Data.password }}
    flyway.url=jdbc:postgresql://postgres-postgresql:5432/fistful-magista?sslmode=disable
    flyway.user={{ .Data.username }}
    flyway.password={{ .Data.password }}
    flyway.schemas=mst
    spring.flyway.schemas=mst
    {{- end }}`}}

{{ $domainWithNamespace := printf "%s.%s" .Release.Namespace .Values.services.ingress.rootDomain }}
{{ $ingressDomain := .Values.services.ingress.namespacedDomain | ternary $domainWithNamespace .Values.services.ingress.rootDomain }}

ingress:
  enabled: true
  annotations:
{{- if .Values.services.ingress.tls.letsEncrypt.enabled }}
    cert-manager.io/cluster-issuer: {{ .Values.services.ingress.tls.letsEncrypt.issuer }}
{{- end }}
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization,X-Request-ID"
    kubernetes.io/ingress.class: {{ .Values.services.ingress.class | quote }}
  hosts:
    - host: iddqd.{{ $ingressDomain | default "rbk.dev" }}
      paths:
        - /fistful/stat
{{- if .Values.services.ingress.tls.enabled }}
  tls:
  {{ if .Values.services.ingress.tls.letsEncrypt.enabled }}
    - secretName: iddqd-{{ .Values.services.ingress.tls.secretName }}
  {{- else }}
    - secretName: {{ .Values.services.ingress.tls.secretName }}
  {{- end }}
      hosts:
        - iddqd.{{ $ingressDomain | default "rbk.dev" }}
{{- end }}
  servicePort: 8022

metrics:
  serviceMonitor:
    enabled: {{ .Values.services.global.metrics.enabled }}
    namespace: {{ .Release.Namespace }}
    additionalLabels:
      release: prometheus
    endpoints:
      - port: "management"
        path: /actuator/prometheus
        scheme: http

ciliumPolicies:
  - filters:
    - port: 5432
      type: TCP
    name: postgres
    namespace: {{ .Release.Namespace }}
  - filters:
    - port: 9092
      rules:
        kafka:
        - role: consume
          topics:
            - mg-events-ff-deposit
            - mg-events-ff-identity
            - mg-events-ff-wallet
            - mg-events-ff-withdrawal
      type: TCP
    name: kafka
    namespace: {{ .Release.Namespace }}
  - filters:
    - port: 8200
      type: TCP
    name: vault
    namespace: {{ .Release.Namespace }}
  - filters:
    - port: 8022
      type: TCP
    name: wapi
    namespace: {{ .Release.Namespace }}

##In case of kafka mTLS auth move it to vault template
# {{- /*
#      kafka.ssl.enabled={{ kafka.ssl.enable }}
#      kafka.ssl.key-store-location=/opt/{{ service_name }}/kafka-keystore.p12
#      kafka.ssl.key-store-password="{{ service.keystore.pass }}"
#      kafka.ssl.key-password="{{ service.keystore.pass }}"
#      kafka.ssl.trust-store-location=/opt/{{ service_name }}/kafka-truststore.p12
#      kafka.ssl.trust-store-password="{{ kafka.truststore.java.pass }}"
# */ -}}
