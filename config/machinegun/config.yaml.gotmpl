service_name: machinegun
dist_node_name:
  hostpart: ip

erlang:
{{- if .Values.services.global.ipv6only }}
  ipv6: true
{{- else }}
  ipv6: false
{{- end }}
  disable_dns_cache: true
  secret_cookie_file: /opt/machinegun/etc/cookie

woody_server:
  ip: "::"
  port: 8022
  max_concurrent_connections: 8000
  http_keep_alive_timeout: 3000ms

storage:
  type: riak
  host: {{ .Values.services.riak.riakMgAddress | default "riak" }}
  port: 8087
  pool:
    size: 100
    queue_max: 500
  batch_concurrency_limit: 10
  connect_timeout: 500ms
  request_timeout: 10s
  index_query_timeout: 60s

# consuela:
#   presence:
#     check_interval: 5s
#   registry:
#     nodename: consul-server-0
#     session_ttl: 30s
#     session_renewal_interval: 10s
#   discovery:
#     tags: []

logging:
  out_type: stdout

# Consul client settings.
# Required when distributed machine registry is enabled.
# consul:
#   url: http://consul-server:8500
#   connect_timeout: 200ms
#   recv_timeout: 1s

namespaces:
  domain-config:
    overseer:
      &default_overseer_config
      scan_interval: 60m
      min_scan_delay: 5s
    timers:
      &default_timers_config
      scan_interval: 60s
      scan_limit: 5000
      capacity: 2000
      min_scan_delay: 5s
    processor:
      url: http://dominant:8022/v1/stateproc
      http_keep_alive_timeout: 3000ms

  bender_generator:
    timers: disabled
    overseer: *default_overseer_config
    processor:
      url: http://bender:8022/v1/stateproc/bender_generator
      pool_size: 300
      http_keep_alive_timeout: 3000ms

  bender_sequence:
    timers: disabled
    overseer: *default_overseer_config
    processor:
      url: http://bender:8022/v1/stateproc/bender_sequence
      pool_size: 300
      http_keep_alive_timeout: 3000ms

  customer:
    timers: *default_timers_config
    overseer: *default_overseer_config
    event_sinks:
      kafka:
        type: kafka
        topic: mg-events-customer
        client: default_kafka_client
    processor:
      url: http://hellgate:8022/v1/stateproc/customer
      pool_size: 300
      http_keep_alive_timeout: 3000ms

  invoice:
    timers:
      &default_timers_config
      scan_interval: 60s
      scan_limit: 5000
      capacity: 2000
      min_scan_delay: 5s
    overseer: *default_overseer_config
    event_sinks:
      kafka:
        type: kafka
        topic: mg-events-invoice
        client: default_kafka_client
    processor:
      url: http://hellgate:8022/v1/stateproc/invoice
      pool_size: 2000
      http_keep_alive_timeout: 3000ms

  invoice_template:
    timers: disabled
    overseer: *default_overseer_config
    event_sinks:
      kafka:
        type: kafka
        topic: mg-events-invoice-template
        client: default_kafka_client
    processor:
      url: http://hellgate:8022/v1/stateproc/invoice_template
      pool_size: 2000
      http_keep_alive_timeout: 3000ms

  recurrent_paytools:
    timers: *default_timers_config
    overseer: *default_overseer_config
    event_sinks:
      kafka:
        type: kafka
        topic: mg-events-recurrent-paytools
        client: default_kafka_client
    processor:
      url: http://hellgate:8022/v1/stateproc/recurrent_paytools
      pool_size: 300
      http_keep_alive_timeout: 3000ms

  party:
    timers: disabled
    overseer: *default_overseer_config
    event_sinks:
      kafka:
        type: kafka
        topic: mg-events-party
        client: default_kafka_client
    processor:
      url: http://party-management:8022/v1/stateproc/party
      http_keep_alive_timeout: 3000ms

  url-shortener:
    timers: *default_timers_config
    overseer: *default_overseer_config
    processor:
      url: http://url-shortener:8022/v1/stateproc
      http_keep_alive_timeout: 3000ms

  ff/identity:
      timers: *default_timers_config
      overseer: *default_overseer_config
      event_sinks:
          machine:
              type: machine
              machine_id: ff/identity
          kafka:
              type: kafka
              topic: mg-events-ff-identity
              client: default_kafka_client
      processor:
          url: http://fistful:8022/v1/stateproc/ff/identity
          http_keep_alive_timeout: 3000ms
  ff/wallet_v2:
      timers: *default_timers_config
      overseer: *default_overseer_config
      event_sinks:
          machine:
              type: machine
              machine_id: ff/wallet_v2
          kafka:
              type: kafka
              topic: mg-events-ff-wallet
              client: default_kafka_client
      processor:
          url: http://fistful:8022/v1/stateproc/ff/wallet_v2
          http_keep_alive_timeout: 3000ms
  ff/source_v1:
      timers: *default_timers_config
      overseer: *default_overseer_config
      event_sinks:
          machine:
              type: machine
              machine_id: ff/source_v1
          kafka:
              type: kafka
              topic: mg-events-ff-source
              client: default_kafka_client
      processor:
          url: http://fistful:8022/v1/stateproc/ff/source_v1
          http_keep_alive_timeout: 3000ms
  ff/destination_v2:
      timers: *default_timers_config
      overseer: *default_overseer_config
      event_sinks:
          machine:
              type: machine
              machine_id: ff/destination_v2
          kafka:
              type: kafka
              topic: mg-events-ff-destination
              client: default_kafka_client
      processor:
          url: http://fistful:8022/v1/stateproc/ff/destination_v2
          http_keep_alive_timeout: 3000ms
  ff/deposit_v1:
      timers: *default_timers_config
      overseer: *default_overseer_config
      event_sinks:
          machine:
              type: machine
              machine_id: ff/deposit_v1
          kafka:
              type: kafka
              topic: mg-events-ff-deposit
              client: default_kafka_client
      processor:
          url: http://fistful:8022/v1/stateproc/ff/deposit_v1
          http_keep_alive_timeout: 3000ms
  ff/withdrawal_v2:
      timers: *default_timers_config
      overseer: *default_overseer_config
      event_sinks:
          machine:
              type: machine
              machine_id: ff/withdrawal_v2
          kafka:
              type: kafka
              topic: mg-events-ff-withdrawal
              client: default_kafka_client
      processor:
          url: http://fistful:8022/v1/stateproc/ff/withdrawal_v2
          http_keep_alive_timeout: 3000ms
  ff/withdrawal/session_v2:
      timers: *default_timers_config
      overseer: *default_overseer_config
      event_sinks:
          machine:
              type: machine
              machine_id: ff/withdrawal/session_v2
      processor:
          url: http://fistful:8022/v1/stateproc/ff/withdrawal/session_v2
          http_keep_alive_timeout: 3000ms
  ff/sequence:
      timers: disabled
      overseer: *default_overseer_config
      processor:
          url: http://fistful:8022/v1/stateproc/ff/sequence
          http_keep_alive_timeout: 3000ms
  ff/external_id:
      timers: disabled
      overseer: *default_overseer_config
      processor:
          url: http://fistful:8022/v1/stateproc/ff/external_id
          http_keep_alive_timeout: 3000ms
  ff/w2w_transfer_v1:
      timers: *default_timers_config
      overseer: *default_overseer_config
      event_sinks:
          machine:
              type: machine
              machine_id: ff/w2w_transfer_v1
          kafka:
              type: kafka
              topic: mg-events-ff-w2w-transfer
              client: default_kafka_client
      processor:
          url: http://fistful:8022/v1/stateproc/ff/w2w_transfer_v1
          http_keep_alive_timeout: 3000ms

kafka:
  default_kafka_client:
    endpoints:
    - host: "{{ .Values.services.kafka.endpoint | default "kafka" }}"
      port: {{ .Values.services.kafka.port | default "9092" }}
{{- if .Values.services.kafka.ssl.enabled }}
    ssl:
      certfile: "/vault/secrets/kafka/tls.crt"
      keyfile: "/vault/secrets/kafka/tls.key"
      cacertfile: "/vault/secrets/ca.crt"
{{- end }}
    producer:
      compression: no_compression  # 'gzip' or 'snappy' to enable compression
      # How many message sets (per-partition) can be sent to kafka broker
      # asynchronously before receiving ACKs from broker.
      partition_onwire_limit: 1
      # Maximum time the broker can await the receipt of the
      # number of acknowledgements in RequiredAcks. The timeout is not an exact
      # limit on the request time for a few reasons: (1) it does not include
      # network latency, (2) the timer begins at the beginning of the processing
      # of this request so if many requests are queued due to broker overload
      # that wait time will not be included, (3) kafka leader will not terminate
      # a local write so if the local write time exceeds this timeout it will
      # not be respected.
      ack_timeout: 10s
      # How many acknowledgements the kafka broker should receive from the
      # clustered replicas before acking producer.
      #   none: the broker will not send any response
      #      (this is the only case where the broker will not reply to a request)
      #   leader_only: The leader will wait the data is written to the local log before
      #      sending a response.
      #   all_isr: If it is 'all_isr' the broker will block until the message is committed by
      #      all in sync replicas before acking.
      required_acks: all_isr
      # How many requests (per-partition) can be buffered without blocking the
      # caller. The callers are released (by receiving the
      # 'brod_produce_req_buffered' reply) once the request is taken into buffer
      # and after the request has been put on wire, then the caller may expect
      # a reply 'brod_produce_req_acked' when the request is accepted by kafka.
      partition_buffer_limit: 256
      # Messages are allowed to 'linger' in buffer for this amount of
      # time before being sent.
      # Definition of 'linger': A message is in 'linger' state when it is allowed
      # to be sent on-wire, but chosen not to (for better batching).
      max_linger: 0ms
      # At most this amount (count not size) of messages are allowed to 'linger'
      # in buffer. Messages will be sent regardless of 'linger' age when this
      # threshold is hit.
      # NOTE: It does not make sense to have this value set larger than
      #       `partition_buffer_limit'
      max_linger_count: 0
      # In case callers are producing faster than brokers can handle (or
      # congestion on wire), try to accumulate small requests into batches
      # as much as possible but not exceeding max_batch_size.
      # OBS: If compression is enabled, care should be taken when picking
      #      the max batch size, because a compressed batch will be produced
      #      as one message and this message might be larger than
      #      'max.message.bytes' in kafka config (or topic config)
      max_batch_size: 1M
      # If {max_retries, N} is given, the producer retry produce request for
      # N times before crashing in case of failures like connection being
      # shutdown by remote or exceptions received in produce response from kafka.
      # The special value N = -1 means 'retry indefinitely'
      max_retries: 3
      # Time in milli-seconds to sleep before retry the failed produce request.
      retry_backoff: 500ms
