[
    {limiter, [
        {ip, "::"},
        {port, 8022},
        {services, #{
            limiter => #{
                path => <<"/v1/limiter">>
            },
            configurator => #{
                path => <<"/v1/configurator">>
            }
        }},
        {service_clients, #{
            accounter => #{
                url => <<"http://shumway:8022/accounter">>
            },
            automaton => #{
                url => <<"http://machinegun:8022/v1/automaton">>
            },
            xrates => #{
                url => <<"http://xrates:8022/xrates">>
            }
        }},

        {exchange_factors, #{
            <<"DEFAULT">> => {1, 1},
            <<"USD">> => {105, 100},
            <<"EUR">> => {12, 10}
        }},

        {protocol_opts, #{
            % How much to wait for another request before closing a keepalive connection? (ms)
            request_timeout => {{ woody_server_keep_alive }},
            % Should be greater than any other timeouts
            idle_timeout => infinity
        }},
        {transport_opts, #{
            handshake_timeout => 5000, % timeout() | infinity, default is 5000
            max_connections => 10000,  % maximum number of incoming connections, default is 1024
            num_acceptors => 100       % size of acceptors pool, default is 10
        }},
        % How much to wait for outstanding requests completion when asked to shut down? (ms)
        {shutdown_timeout, 7000},

        {woody_event_handlers, [
            hay_woody_event_handler,
            {scoper_woody_event_handler, #{
                event_handler_opts => #{
                    formatter_opts => #{
                        max_length => 1000,
                        max_printable_string_length => 120
                    }
                }
            }}
        ]},

        {health_check, #{
            disk    => {erl_health, disk     , ["/", 99]},
            memory  => {erl_health, cg_memory, [99]},
            service => {erl_health, service  , [<<"limiter">>]}
        }}
    ]},

    {kernel, [
        {logger_level, info},
        {logger, [
            {handler, default, logger_std_h, #{
                level => debug,
                config => #{
                    type => standard_io
                },
                formatter => {logger_logstash_formatter, #{}}
            }}
        ]}
    ]},

    {os_mon, [
        % for better compatibility with busybox coreutils
        {disksup_posix_only, true}
    ]},

    {scoper, [
        {storage, scoper_storage_logger}
    ]},

    {how_are_you, [
        {metrics_handlers, [
            hay_vm_handler,
            hay_cgroup_handler,
            woody_api_hay
        ]},
        {metrics_publishers, []}
    ]},

    {snowflake, [{machine_id, 1}]},

    {prometheus, [
        {collectors, [default]}
    ]}
].
