%% -*- mode: erlang -*-
[
    {bouncer, [
        {ip, "::"},
        {port, 8022},
        {services, #{
            arbiter => #{path => <<"/v1/arbiter">>}
        }},
        {protocol_opts, #{
            % How much to wait for another request before closing a keepalive connection? (ms)
            request_timeout => 5000
        }},
        {transport_opts, #{
            % Maximum number of simultaneous connections.
            max_connections => 8000,
            % Size of the acceptor pool.
            num_acceptors => 100
        }},
        % How much to wait for outstanding requests completion when asked to shut down? (ms)
        {shutdown_timeout, 1000},

        {audit, #{
            % Audit logging.
            log => #{
                % Audit log level, ideally should be higher that `kernel.level`.
                level => notice,
                backend => #{
                    type => standard_io
                },
                formatter => {logger_logstash_formatter, #{
                    chars_limit => 4096,
                    depth => unlimited
                }}
            }
        }},

        {opa, #{
            %% Endpoint of the OPA service
            endpoint => {
                {resolve, dns, "bouncer-policies",
                    #{pick => random}
                },
                8181
            },
            %% Timeout for making request and receiving response. (ms)
            request_timeout => 1000,
            %% Pool options, see gunner_pool:pool_opts()
            pool_opts => #{
                cleanup_interval => 1000,
                max_connection_idle_age => 3000,
                max_size => 200,
                min_size => 5,
                connection_opts => #{
                    % Which transport to use? (tcp | tls)
                    transport             => tcp,
                    % Which `gen_tcp:connect_option()`s to use? Relevant only for `tcp` transport.
                    {{- if .Values.services.global.ipv6only -}}
                    tcp_opts              => [inet6],
                    {{- else -}}
                    tcp_opts              => [inet],
                    {{- end }}
                    % Total timeout for estabilishing a connection. (ms)
                    connect_timeout       => 1000
                }
            }
        }},

        {woody_event_handlers, [
            hay_woody_event_handler,
            {scoper_woody_event_handler, #{
                event_handler_opts => #{
                    formatter_opts => #{
                        max_length => 1000,
                        max_printable_string_length => 80
                    }
                }
            }}
        ]},

        {health_check, #{
            disk    => {erl_health, disk     , ["/", 99]},
            memory  => {erl_health, cg_memory, [70]},
            service => {erl_health, service  , [<<"bouncer">>]}
        }}

    ]},

    {os_mon, [
        {disksup_posix_only, true}
    ]},

    {scoper, [
        {storage, scoper_storage_logger}
    ]},

    {kernel, [
        {logger_level, info},
        {logger, [
            {handler, default, logger_std_h, #{
                level => debug,
                config => #{
                    type => standard_io,
                    sync_mode_qlen => 2000,
                    drop_mode_qlen => 2000,
                    flush_qlen => 3000
                },
                formatter => {logger_logstash_formatter, #{}}
            }}
        ]}
    ]}

].
